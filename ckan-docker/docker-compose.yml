# Docker Compose file for a full CKAN instance with harvester, xloader, and datapusher.
networks:
  ckan-net:
  
volumes:
  ckan_storage:
  pg_data:
  solr_data:
  pip_cache:
  site_packages:

services:

  nginx:
    build:
      context: nginx/
      dockerfile: Dockerfile
    networks: 
      - ckan-net
    env_file:
      - .env
    depends_on:
      ckan:
        condition: service_healthy
    ports:
      - "0.0.0.0:${NGINX_SSLPORT_HOST}:${NGINX_SSLPORT}"
    
  ckan:
    build:
      context: ckan/
      dockerfile: Dockerfile
      args:
        TZ: ${TZ}
    networks: [ckan-net]
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      solr:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ckan_storage:/var/lib/ckan
      - pip_cache:/root/.cache/pip
      - site_packages:/usr/lib/python3.10/site-packages
    environment:
      CKAN_LANG: en
      CKAN__HARVEST__MAX_FILE_SIZE: 500
      DCAT_ENABLE_CONTENT_NEGOTIATION: true
      HARVEST_MQ_HOSTNAME: redis

    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:5000/api/3/action/status_show | grep -q '\"success\": true'"]
      
      # Give the container a longer time to start up and become responsive.
      # The default `start_period` is 0s. Let's give it 60 seconds.
      start_period: 60s
      # Check every 5 seconds.
      interval: 20s
      # Allow 10 seconds for the check to pass.
      timeout: 10s
      # Allow up to 10 failures before considering the service unhealthy.
      retries: 10 
    # command: /srv/app/set_ckan_config.sh
      
  datapusher:
    image: ckan/ckan-base-datapusher:${DATAPUSHER_VERSION}
    networks: [ckan-net]
    env_file:
      - .env
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO", "/dev/null", "http://localhost:8800"]
      interval: 60s
      timeout: 10s
      retries: 3

  db:
    build:
      context: postgresql/
    networks: [ckan-net]
    env_file:
      - .env
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - CKAN_DB_USER
      - CKAN_DB_PASSWORD
      - CKAN_DB
      - DATASTORE_READONLY_USER
      - DATASTORE_READONLY_PASSWORD
      - DATASTORE_DB
    volumes:
      - pg_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
     
  solr:
    networks: [ckan-net]
    image: ckan/ckan-solr:${SOLR_IMAGE_VERSION}
    volumes:
      - solr_data:/var/solr
    restart: unless-stopped
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "wget", "-qO", "/dev/null", "http://localhost:8983/solr/"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:${REDIS_VERSION}
    networks: 
      - ckan-net
    env_file:
      - .env
    # Add a password to the Redis server
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "PING"]
      interval: 10s
      timeout: 5s
      retries: 5

  gather-consumer:
    build:
      context: ./ckan
      dockerfile: Dockerfile
    command: [ "ckan", "-c", "/srv/app/ckan.ini", "harvester", "gather-consumer" ]
    networks: [ckan-net]
    depends_on:
      - ckan
      - db
      - redis
    env_file:
      - .env
    environment:
      # Pass the password to the consumer services
      CKAN_REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      CKAN__HARVEST__MQ__REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      CKAN__HARVEST__MQ__REDIS_DB: 0
    restart: unless-stopped
    
  fetch-consumer:
    build:
      context: ./ckan
      dockerfile: Dockerfile
    command: [ "ckan", "-c", "/srv/app/ckan.ini", "harvester", "fetch-consumer" ]
    networks: [ckan-net]
    depends_on:
      - ckan
      - db
      - redis
    env_file:
      - .env
    environment:
      # Pass the password to the consumer services
      CKAN_REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      CKAN__HARVEST__MQ__REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
    restart: unless-stopped
    

  # xloader:
  #   build:
  #     context: ./ckan
  #     dockerfile: Dockerfile
  #   entrypoint: ["/docker-entrypoint.sh"]
  #   command: ["ckan", "xloader", "worker", "--config=/srv/app/ckan.ini"]
  #   depends_on:
  #     - ckan
  #   env_file:
  #     - .env

